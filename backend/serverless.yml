service: cb-token-sale

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  stage: prod008
  region: us-east-1
  runtime: nodejs6.10
  memorySize: 256
  timeout: 5
  versionFunctions: true
  environment:  ${self:custom.externalEnv.environment}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:custom.stage}-*"

custom:
  stage: ${opt:stage, self:provider.stage}
  externalEnv: ${file(env.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  cors: ${self:custom.externalEnv.cors}
  dynamodbThroughput: ${self:custom.externalEnv.dynamodbThroughput}
  vpc: ${self:custom.externalEnv.vpc}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.CB_ENV_NAME}-events
            sources: [./data/events.json]
          - table: ${self:provider.environment.CB_ENV_NAME}-addresses
            sources: [./data/addresses.json]
  serverless-offline:
    port: 9000

functions:

  ### API functions
  login-api:
    handler: lambda/login-api.post
    events:
      - http:
          path: /v1.0/login
          method: post
          cors: true

  graphql-api:
    handler: lambda/graphql-api.post
    events:
    - http:
        path: /v1.0/graphql
        method: post
        cors: true

  ### Backoffice functions
  orders-backoffice-stream-processor:
    handler: lambda/backoffice-stream-processor.process
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - EventsDynamoDbTable
              - StreamArn
    vpc: ${self:custom.vpc}

resources:
  Resources:
    WebsiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CB_ENV_NAME}-website
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebsiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebsiteS3Bucket
                  - "/*"

    AddressesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-addresses
        AttributeDefinitions:
          -
            AttributeName: address
            AttributeType: S
        KeySchema:
          -
            AttributeName: address
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.addresses.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.addresses.write}
    AccessTokensDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-access-tokens
        AttributeDefinitions:
          -
            AttributeName: access_token_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: access_token_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.accessTokens.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.accessTokens.write}
    EventsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-events
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
          -
            AttributeName: event_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
          -
            AttributeName: event_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.events.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.events.write}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
